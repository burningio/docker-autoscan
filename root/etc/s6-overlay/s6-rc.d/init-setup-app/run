#!/command/with-contenv bash
# shellcheck shell=bash

umask "${UMASK}"

mask() {
    local n=3
    [[ ${#1} -le 5 ]] && n=$(( ${#1} - 3 ))
    local a="${1:0:${#1}-n}"
    local b="${1:${#1}-n}"
    printf "%s%s\n" "${a//?/*}" "$b"
}

echo "
----------------------------------------------------------------------
ENVIRONMENT APP
----------------------------------------------------------------------
WEBUI_PORTS=${WEBUI_PORTS}
PLEX_LOGIN=${PLEX_LOGIN}
PLEX_PASSWORD=$(mask "${PLEX_PASSWORD}")
----------------------------------------------------------------------
"

if [[ ! -f "${CONFIG_DIR}/config.yml" ]]; then
    echo "Installing default \"config.yml\"..."
    cp "${APP_DIR}/config.yml" "${CONFIG_DIR}/config.yml"
    find "${CONFIG_DIR}/config.yml" -maxdepth 0 \( ! -user hotio -or ! -group hotio \) -exec chown hotio:hotio {} +
fi

if [[ ! -f "${CONFIG_DIR}/plex.token" ]] && [[ -n ${PLEX_LOGIN} ]] && [[ -n ${PLEX_PASSWORD} ]]; then
    echo "Trying to get a Plex token for Autoscan..."
    curl -fsSL -u "${PLEX_LOGIN}":"${PLEX_PASSWORD}" 'https://plex.tv/users/sign_in.json' -X POST -H 'X-Plex-Client-Identifier: '"$(cat /proc/sys/kernel/random/uuid)" -H 'X-Plex-Product: Autoscan' -H 'X-Plex-Provides: controller' -H 'X-Plex-Device: '"$(uname -s) $(uname -r)" | jq . \
        > "${CONFIG_DIR}/plex.token" && find "${CONFIG_DIR}/plex.token" -maxdepth 0 \( ! -user hotio -or ! -group hotio \) -exec chown hotio:hotio {} +

    token="$(jq -r .[].authentication_token "${CONFIG_DIR}/plex.token")"
    if [[ -n ${token} ]] && [[ ${token} != null ]]; then
        echo "Your Plex token is: ${token}, you can use this in your config.yml."
    else
        echo "Something went wrong trying to get a token!"
    fi
fi
